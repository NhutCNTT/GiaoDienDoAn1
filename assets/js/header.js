/* =========================================================
   HEADER.JS ‚Äì LOAD HEADER + LOGIN/LOGOUT + USER MENU
   ========================================================= */
document.addEventListener("DOMContentLoaded", loadHeader);

function loadHeader() {
  fetch("components/header.html")
    .then(res => res.text())
    .then(html => {
      const host = document.getElementById("header-placeholder");
      if (!host) return;

      // G·∫Øn HTML header v√†o trang
      host.innerHTML = html;

      // Setup sau khi header ƒë√£ render
      setupUserMenu(); 
      highlightActiveLink(); // ‚úÖ ƒê√°nh d·∫•u link active

      // ƒê√°nh d·∫•u ƒë√£ load header
      document.body.dataset.headerLoaded = "true";

      // N·∫øu c√≥ h√†m checkLayoutReady (ngo√†i), g·ªçi th√™m
      if (typeof checkLayoutReady === "function") {
        checkLayoutReady();
      }
    })
    .catch(err => console.error("L·ªói khi load header:", err));
}

/* =========================================================
   AUTH UTILS
   ========================================================= */
function getAuth() {
  if (localStorage.getItem("loggedIn") === "true") {
    return { store: localStorage, username: localStorage.getItem("username") };
  }
  if (sessionStorage.getItem("loggedIn") === "true") {
    return { store: sessionStorage, username: sessionStorage.getItem("username") };
  }
  return null;
}

/* =========================================================
   SETUP USER MENU + LOGIN FORM
   ========================================================= */
function setupUserMenu() {
  const loginBtn = document.getElementById("login-btn");
  const userBox  = document.getElementById("user-menu");
  const auth = getAuth();

  if (auth?.username) {
    // üîπ ƒê√£ ƒëƒÉng nh·∫≠p
    loginBtn?.classList.add("d-none");
    userBox?.classList.remove("d-none");

    // G·∫Øn t√™n & avatar
    const nameSpan = document.querySelector("#userMenu .user-name");
    if (nameSpan) nameSpan.textContent = auth.username;

    const avatar = document.querySelector("#userMenu .user-avatar");
    if (avatar) avatar.textContent = auth.username[0].toUpperCase();

    // Demo badge (th√¥ng b√°o)
    const bellBadge = document.querySelector("#bell-badge");
    const chatBadge = document.querySelector("#chat-badge");
    if (bellBadge) bellBadge.textContent = "3";
    if (chatBadge) chatBadge.textContent = "2";
  } else {
    // üîπ Ch∆∞a ƒëƒÉng nh·∫≠p
    userBox?.classList.add("d-none");
    loginBtn?.classList.remove("d-none");
  }

  // ƒêƒÉng xu·∫•t
  document.getElementById("logout-btn")?.addEventListener("click", (e) => {
    e.preventDefault();
    localStorage.clear();
    sessionStorage.clear();
    window.location.href = "login.html";
  });

  // X·ª≠ l√Ω form login n·∫øu ƒëang ·ªü login.html
  const loginForm = document.getElementById("loginForm");
  if (loginForm) {
    loginForm.addEventListener("submit", (e) => {
      e.preventDefault();
      const u = document.getElementById("username")?.value.trim();
      const p = document.getElementById("password")?.value.trim();
      const remember = document.getElementById("rememberMe")?.checked;
      const err = document.getElementById("error-msg");

      const demoUser = "phuoc";
      const demoPass = "123456";

      if (u === demoUser && p === demoPass) {
        const store = remember ? localStorage : sessionStorage;
        store.setItem("loggedIn", "true");
        store.setItem("username", u);
        window.location.href = "index.html";
      } else {
        if (err) {
          err.textContent = "‚ùå T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!";
          err.classList.remove("d-none");
        } else {
          alert("T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!");
        }
      }
    });
  }
}

/* =========================================================
   HIGHLIGHT ACTIVE NAV LINK
   ========================================================= */
function highlightActiveLink() {
  const links = document.querySelectorAll(".navbar-nav .nav-link, .dropdown-item");
  const currentUrl = window.location.pathname.split("/").pop(); // v√≠ d·ª•: introduce.html

  links.forEach(link => {
    const linkUrl = link.getAttribute("href");

    if (linkUrl === currentUrl) {
      link.classList.add("active");

      // N·∫øu link trong dropdown ‚Üí ƒë√°nh d·∫•u cha
      const parentDropdown = link.closest(".dropdown");
      if (parentDropdown) {
        const parentLink = parentDropdown.querySelector(".nav-link");
        if (parentLink) parentLink.classList.add("active");
      }
    }
  });
}


/* ============================================================
   HEADER NAV ‚Äî Dropdown: Desktop=Hover, Mobile=Click (Bootstrap)
   - Desktop (>=992px): m·ªü b·∫±ng hover qua CSS, t·∫Øt data-bs-toggle.
   - Mobile  (<992px): th√™m data-bs-toggle="dropdown" ƒë·ªÉ m·ªü b·∫±ng click.
   - T·ª± d·ªçn tr·∫°ng th√°i .show khi chuy·ªÉn k√≠ch th∆∞·ªõc.
   - NgƒÉn nh·∫£y trang khi href="#" ·ªü desktop hover.
   ============================================================ */

(() => {
  const DESKTOP_MIN = 992;

  // G·∫Øn/t·∫Øt h√†nh vi click c·ªßa Bootstrap cho mobile
  function applyDropdownMode() {
    const toggles = document.querySelectorAll('.navbar .dropdown-toggle');
    const isMobile = window.innerWidth < DESKTOP_MIN;

    toggles.forEach(t => {
      if (isMobile) {
        t.setAttribute('data-bs-toggle', 'dropdown');
        t.setAttribute('data-bs-auto-close', 'outside'); // click ngo√†i th√¨ ƒë√≥ng
      } else {
        t.removeAttribute('data-bs-toggle');
        t.removeAttribute('data-bs-auto-close');

        // N·∫øu ƒëang m·ªü theo Bootstrap (do tr∆∞·ªõc ƒë√≥ l√† mobile) ‚Üí ƒë√≥ng l·∫°i
        const menu = t.parentElement && t.parentElement.querySelector('.dropdown-menu');
        if (menu && menu.classList.contains('show') && window.bootstrap) {
          const inst = bootstrap.Dropdown.getInstance(t) || new bootstrap.Dropdown(t);
          inst.hide();
          // ƒë·ªìng b·ªô aria
          t.setAttribute('aria-expanded', 'false');
        }
      }
    });
  }

  // Ch·∫∑n nh·∫£y trang khi href="#" ·ªü desktop (hover)
  function preventHashJumpOnDesktop(e) {
    const link = e.target.closest('.navbar .dropdown-toggle');
    if (!link) return;
    const isMobile = window.innerWidth < DESKTOP_MIN;

    // ·ªû desktop, n·∫øu link l√† "#" th√¨ kh√¥ng ƒëi·ªÅu h∆∞·ªõng (ƒë√£ c√≥ hover)
    if (!isMobile && link.getAttribute('href') === '#') {
      e.preventDefault();
    }
  }

  // (Khuy√™n d√πng) ƒê√≥ng t·∫•t c·∫£ dropdown khi click link con tr√™n mobile
  function closeOnItemClickMobile(e) {
    const item = e.target.closest('.dropdown-menu .dropdown-item');
    if (!item) return;
    const isMobile = window.innerWidth < DESKTOP_MIN;
    if (!isMobile) return;

    // t√¨m toggle cha g·∫ßn nh·∫•t v√† ƒë√≥ng
    const parentDropdown = item.closest('.nav-item.dropdown');
    if (!parentDropdown) return;
    const toggle = parentDropdown.querySelector('.dropdown-toggle');
    if (toggle && window.bootstrap) {
      const inst = bootstrap.Dropdown.getInstance(toggle) || new bootstrap.Dropdown(toggle);
      inst.hide();
      toggle.setAttribute('aria-expanded', 'false');
    }
  }

  // Kh·ªüi t·∫°o sau khi DOM s·∫µn s√†ng
  function init() {
    applyDropdownMode();

    // Debounce resize ƒë·ªÉ ƒë·ªïi ch·∫ø ƒë·ªô m∆∞·ª£t
    let tmr;
    window.addEventListener('resize', () => {
      clearTimeout(tmr);
      tmr = setTimeout(applyDropdownMode, 150);
    });

    // Ch·∫∑n nh·∫£y trang cho href="#" khi d√πng hover (desktop)
    document.addEventListener('click', preventHashJumpOnDesktop);

    // ƒê√≥ng menu tr√™n mobile khi ch·ªçn m·ª•c con
    document.addEventListener('click', closeOnItemClickMobile);
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
})();
